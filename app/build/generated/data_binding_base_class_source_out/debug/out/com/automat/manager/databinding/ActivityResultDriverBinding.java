// Generated by view binder compiler. Do not edit!
package com.automat.manager.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ProgressBar;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.automat.manager.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityResultDriverBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ProgressBar pbResultOrder;

  @NonNull
  public final Button resultCreateOrder;

  @NonNull
  public final TextView tvOrderResult;

  @NonNull
  public final TextView tvReturnOrderResult;

  private ActivityResultDriverBinding(@NonNull ConstraintLayout rootView,
      @NonNull ProgressBar pbResultOrder, @NonNull Button resultCreateOrder,
      @NonNull TextView tvOrderResult, @NonNull TextView tvReturnOrderResult) {
    this.rootView = rootView;
    this.pbResultOrder = pbResultOrder;
    this.resultCreateOrder = resultCreateOrder;
    this.tvOrderResult = tvOrderResult;
    this.tvReturnOrderResult = tvReturnOrderResult;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityResultDriverBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityResultDriverBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_result_driver, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityResultDriverBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.pb_result_order;
      ProgressBar pbResultOrder = ViewBindings.findChildViewById(rootView, id);
      if (pbResultOrder == null) {
        break missingId;
      }

      id = R.id.result_create_order;
      Button resultCreateOrder = ViewBindings.findChildViewById(rootView, id);
      if (resultCreateOrder == null) {
        break missingId;
      }

      id = R.id.tv_order_result;
      TextView tvOrderResult = ViewBindings.findChildViewById(rootView, id);
      if (tvOrderResult == null) {
        break missingId;
      }

      id = R.id.tv_return_order_result;
      TextView tvReturnOrderResult = ViewBindings.findChildViewById(rootView, id);
      if (tvReturnOrderResult == null) {
        break missingId;
      }

      return new ActivityResultDriverBinding((ConstraintLayout) rootView, pbResultOrder,
          resultCreateOrder, tvOrderResult, tvReturnOrderResult);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
