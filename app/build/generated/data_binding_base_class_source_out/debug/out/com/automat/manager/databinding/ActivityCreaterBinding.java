// Generated by view binder compiler. Do not edit!
package com.automat.manager.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ProgressBar;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.automat.manager.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityCreaterBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button btCreateOrder;

  @NonNull
  public final Button btExitCreater;

  @NonNull
  public final EditText etNumOfBalloons;

  @NonNull
  public final ProgressBar pbCreateOrder;

  @NonNull
  public final TextView tvFirm;

  @NonNull
  public final TextView tvTypeOfBalloon;

  private ActivityCreaterBinding(@NonNull ConstraintLayout rootView, @NonNull Button btCreateOrder,
      @NonNull Button btExitCreater, @NonNull EditText etNumOfBalloons,
      @NonNull ProgressBar pbCreateOrder, @NonNull TextView tvFirm,
      @NonNull TextView tvTypeOfBalloon) {
    this.rootView = rootView;
    this.btCreateOrder = btCreateOrder;
    this.btExitCreater = btExitCreater;
    this.etNumOfBalloons = etNumOfBalloons;
    this.pbCreateOrder = pbCreateOrder;
    this.tvFirm = tvFirm;
    this.tvTypeOfBalloon = tvTypeOfBalloon;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityCreaterBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityCreaterBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_creater, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityCreaterBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.bt_create_order;
      Button btCreateOrder = ViewBindings.findChildViewById(rootView, id);
      if (btCreateOrder == null) {
        break missingId;
      }

      id = R.id.bt_exit_creater;
      Button btExitCreater = ViewBindings.findChildViewById(rootView, id);
      if (btExitCreater == null) {
        break missingId;
      }

      id = R.id.et_num_of_balloons;
      EditText etNumOfBalloons = ViewBindings.findChildViewById(rootView, id);
      if (etNumOfBalloons == null) {
        break missingId;
      }

      id = R.id.pb_create_order;
      ProgressBar pbCreateOrder = ViewBindings.findChildViewById(rootView, id);
      if (pbCreateOrder == null) {
        break missingId;
      }

      id = R.id.tv_firm;
      TextView tvFirm = ViewBindings.findChildViewById(rootView, id);
      if (tvFirm == null) {
        break missingId;
      }

      id = R.id.tv_type_of_balloon;
      TextView tvTypeOfBalloon = ViewBindings.findChildViewById(rootView, id);
      if (tvTypeOfBalloon == null) {
        break missingId;
      }

      return new ActivityCreaterBinding((ConstraintLayout) rootView, btCreateOrder, btExitCreater,
          etNumOfBalloons, pbCreateOrder, tvFirm, tvTypeOfBalloon);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
